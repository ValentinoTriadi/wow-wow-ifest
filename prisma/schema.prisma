// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  Pekerja
  Penjual
  User
}

enum Gender {
  None
  Lakilaki
  Perempuan
}

model User {
  id             String           @id @default(cuid())
  role           Role             @default(User)
  name           String
  email          String?          @unique
  emailVerified  DateTime?
  phoneNumber    Int              @default(0)
  tanggalLahir   DateTime?
  NIK            Int              @default(0)
  password       String
  gender         Gender           @default(None)
  image          String?
  accounts       Account[]
  sessions       Session[]
  Toko           Toko[]
  Lahan          Lahan[]
  Budak          Pekerja[]
  Rating         Rating[]
  Post           Post[]
  LaporanPekerja LaporanPekerja[]
}

model Panen {
  id             String           @id @default(cuid())
  userId         String
  images         String[]
  title          String
  lokasi         String
  kondisi        String
  laporanPekerja LaporanPekerja[]
  Rating         Rating[]
}

model LaporanPekerja {
  id        String   @id @default(cuid())
  userId    String
  images    String
  date      DateTime
  deskripsi String
  rating    Int?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Panen     Panen?   @relation(fields: [panenId], references: [id])
  panenId   String?
}

model Product {
  id             String   @id @default(cuid())
  tokoid         String
  tag            String[]
  images         String[]
  header         String?
  Lokasi         String?
  namaToko       String?
  harga          Int?
  lahanYangCocok String[]
  deskripsi      String?
  toko           Toko     @relation(fields: [tokoid], references: [id], onDelete: Cascade)
}

model Lahan {
  id            String   @id @default(cuid())
  userId        String
  header        String?
  luasLahan     Int?
  harga         Int?
  tersediaUntuk String[]
  deskripsi     String?
  embedMaps     String?
  Lokasi        String?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bibit {
  id                  String   @id @default(cuid())
  tokoid              String
  tag                 String[]
  images              String[]
  header              String?
  Lokasi              String?
  namaToko            String?
  harga               Int?
  lahanYangCocok      String[]
  deskripsi           String?
  caraPerawatan       String?
  estimasiHasilProduk String?
  toko                Toko     @relation(fields: [tokoid], references: [id], onDelete: Cascade)
}

model Pekerja {
  id           String   @id @default(cuid())
  userId       String
  images       String[]
  nama         String?
  lokasi       String?
  harga        Int?
  keahlian     String[]
  deskripsi    String?
  rincianKerja String[]
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Rating       Rating[]
}

model Toko {
  id      String    @id @default(cuid())
  userId  String
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Product Product[]
  Bibit   Bibit[]
}

model Rating {
  id          Int      @id @default(autoincrement())
  rate        Int[]
  createdAt   DateTime @default(now())
  createdById String
  workerId    String
  panenId     String

  user   User    @relation(fields: [createdById], references: [id], onDelete: Cascade)
  worker Pekerja @relation(fields: [workerId], references: [id], onDelete: Cascade)
  Panen  Panen   @relation(fields: [panenId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
